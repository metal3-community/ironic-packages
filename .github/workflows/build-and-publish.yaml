name: Build and Publish APK Repository

on:
  push:
    branches:
      - main
    paths:
      - '*.yaml'
      - '!.github/**'
      - 'pipelines/**'
      - 'recipes/**'
      - 'Makefile'
      - 'build*.env'
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches:
      - main
    paths:
      - '*.yaml'
      - 'pipelines/**'
      - 'recipes/**'
      - 'Makefile'
      - 'build*.env'
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force rebuild all packages'
        required: false
        default: false
        type: boolean

permissions:
  contents: read
  pages: write
  id-token: write

env:
  SIGNING_KEY_PATH: ${{ github.workspace }}/melange.rsa

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  detect-changes:
    name: Detect Package Changes
    runs-on: ubuntu-latest
    if: |
      github.repository == 'metal3-community/ironic-packages' &&
      (github.event_name == 'push' ||
       github.event_name == 'workflow_dispatch' ||
       (github.event_name == 'pull_request' && github.event.action != 'closed') ||
       (github.event_name == 'pull_request' && github.event.action == 'closed' &&
        github.event.pull_request.merged == true &&
        (contains(github.event.pull_request.labels.*.name, 'package-update') ||
         contains(github.event.pull_request.labels.*.name, 'dependencies') ||
         contains(github.event.pull_request.labels.*.name, 'automated'))))
    outputs:
      packages: ${{ steps.check-force.outputs.force == 'true' && steps.all-packages.outputs.packages || steps.changes.outputs.packages }}
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - name: Check force rebuild
        id: check-force
        run: |
          if [[ "${{ github.event.inputs.force_rebuild }}" == "true" || "${{ github.event_name }}" == "push" ||
                ("${{ github.event_name }}" == "pull_request" &&
                 "${{ github.event.action }}" == "closed" &&
                 "${{ github.event.pull_request.merged }}" == "true") ]]; then
            echo "force=true" >> $GITHUB_OUTPUT
            echo "Forcing rebuild due to: ${{ github.event_name }} / ${{ github.event.action }}"
          else
            echo "force=false" >> $GITHUB_OUTPUT
          fi

      - name: Get all packages
        id: all-packages
        run: |
          packages="$(ls {py3-*,uwsgi}.yaml | jq -R | jq -sc)"
          echo "packages=${packages}" >> $GITHUB_OUTPUT

      - name: Detect changed packages
        id: changes
        if: steps.check-force.outputs.force == 'false'
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" && "${{ github.event.action }}" != "closed" ]]; then
            base_ref="${{ github.event.pull_request.base.sha }}"
          elif [[ "${{ github.event_name }}" == "pull_request" && "${{ github.event.action }}" == "closed" ]]; then
            # For merged PRs, check what was changed in the PR
            base_ref="${{ github.event.pull_request.base.sha }}"
            head_ref="${{ github.event.pull_request.head.sha }}"
          else
            base_ref="HEAD~1"
          fi

          if [[ "${{ github.event_name }}" == "pull_request" && "${{ github.event.action }}" == "closed" ]]; then
            changed_files=$(git diff --name-only $base_ref $head_ref | grep -E '\.(yaml)$' || true)
          else
            changed_files=$(git diff --name-only $base_ref HEAD | grep -E '\.(yaml)$' || true)
          fi

          packages=()

          for file in $changed_files; do
            if [[ $file =~ ^py3-.*\.yaml$ ]]; then
              package="$file"
              packages+=("$package")
            fi
          done

          if [[ ${#packages[@]} -eq 0 ]]; then
            echo "packages=[]" >> $GITHUB_OUTPUT
          else
            printf -v joined '%s\n' "${packages[@]}"
            echo "$joined" | jq -R . | jq -s . > packages.json
            echo "packages=$(cat packages.json)" >> $GITHUB_OUTPUT
          fi

  build-packages:
    name: Build APK Packages
    strategy:
      matrix:
        distro:
          - name: alpine
            repository: |
              https://dl-cdn.alpinelinux.org/alpine/edge/main
              https://dl-cdn.alpinelinux.org/alpine/edge/community
            keyring: ''
          - name: wolfi
            repository: |
              https://packages.wolfi.dev/os
            keyring: https://packages.wolfi.dev/os/wolfi-signing.rsa.pub
        arch: [amd64, arm64]
      fail-fast: false
    needs: detect-changes
    if: github.repository == 'metal3-community/ironic-packages' && needs.detect-changes.outputs.packages != '[]'
    env:
      PACKAGES_TO_BUILD: ${{ needs.detect-changes.outputs.packages }}
      # Map GitHub runner arch to APK arch
      APK_ARCH: ${{ matrix.arch == 'amd64' && 'x86_64' || 'aarch64' }}
    runs-on: ${{ matrix.arch == 'arm64' && 'ubuntu-24.04-arm' || 'ubuntu-22.04' }}
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false

      - name: Install APT dependencies
        run: |
          sudo apt update && \
          sudo apt install -y \
            bubblewrap \
            qemu-user-static

      - id: setup-melange-cache
        uses: actions/cache/restore@v4
        with:
          path: /usr/local/bin/melange
          key: melange-cache-${{ github.run_id }}-${{ github.run_attempt }}

      - name: Install melange
        if: steps.setup-melange-cache.outputs.cache-hit != 'true'
        run: |
          # Install melange from the official releases
          MELANGE_VERSION="0.30.6"

          curl -sL "https://github.com/chainguard-dev/melange/releases/download/v${MELANGE_VERSION}/melange_${MELANGE_VERSION}_linux_${{ matrix.arch }}.tar.gz" \
          | tar xvz --strip-components=1
          sudo mv melange /usr/local/bin/
          chmod +x /usr/local/bin/melange

      - name: Download all package artifacts
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          pattern: packages
          path: packages/${{ matrix.distro.name }}/${{ env.APK_ARCH }}/
        continue-on-error: true

      - name: Ensure packages directory exists
        run: |
          mkdir -p packages/${{ matrix.distro.name }}/${{ env.APK_ARCH }}

      - uses: chainguard-dev/actions/melange-keygen@de82dfd62f186b1b55bd0cdf084f484496d88ee3 # v1.4.11
        with:
          signing-key-path: ${{ env.SIGNING_KEY_PATH }}

      - uses: chainguard-dev/actions/melange-build-pkg@de82dfd62f186b1b55bd0cdf084f484496d88ee3 # v1.4.11
        env:
          MELANGE_RUNNER: docker  # Use docker runner to avoid bubblewrap issues
        with:
          namespace: ${{ matrix.distro.name }}
          multi-config: ${{ join(fromJSON(env.PACKAGES_TO_BUILD), ',') }}
          # pipeline-dir: ./pipelines
          archs: ${{ env.APK_ARCH }}
          signing-key-path: ${{ env.SIGNING_KEY_PATH }}
          repository-path: ${{ github.workspace }}/packages/${{ matrix.distro.name }}
          repository-append: |
            ${{ matrix.distro.repository }}
          keyring-append: ${{ matrix.distro.keyring }}

      - name: Generate APK indexes for ${{ matrix.distro.name }}
        run: |
          packages_dir="packages/${{ matrix.distro.name }}/${{ env.APK_ARCH }}"
          if [[ -d "$packages_dir" ]] && [[ $(ls -1 "${packages_dir}"/*.apk 2>/dev/null | wc -l) -gt 0 ]]; then
            echo "Generating APKINDEX for ${{ matrix.distro.name }}/${{ env.APK_ARCH }}"
            signing_key="$(readlink -f ${{ env.SIGNING_KEY_PATH }})"
            cd "$packages_dir"

            # Remove any existing APKINDEX to avoid merge conflicts
            rm -f APKINDEX.tar.gz APKINDEX.unsigned.tar.gz

            # Generate new APKINDEX
            melange index \
              --signing-key "${signing_key}" \
              *.apk || echo "Warning: Failed to generate APKINDEX, continuing..."
            cd - > /dev/null
          else
            echo "No packages found for ${{ matrix.distro.name }}/${{ env.APK_ARCH }}, skipping index generation"
          fi

      - name: Upload packages artifacts for ${{ matrix.distro.name }}
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: packages
          path: packages/${{ matrix.distro.name }}/${{ env.APK_ARCH }}/
          retention-days: 30

  publish-repository:
    name: Publish APK Repository to GitHub Pages
    runs-on: ubuntu-latest
    needs: [detect-changes, build-packages]
    if: |
      github.repository == 'metal3-community/ironic-packages' &&
      (github.ref == 'refs/heads/main' ||
       (github.event_name == 'pull_request' &&
        github.event.action == 'closed' &&
        github.event.pull_request.merged == true &&
        github.event.pull_request.base.ref == 'main')) &&
      (needs.detect-changes.outputs.packages != '[]')
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Download all package artifacts
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          pattern: packages
          path: packages/

      - name: Setup Pages
        uses: actions/configure-pages@983d7736d9b0ae728b81ab479565c72886d7745b # v5.0.0

      - name: Organize repository structure
        run: |
          mkdir -p repository

          # The packages already contain the proper distro/arch structure
          # Just copy everything to the repository directory
          if [[ -d "packages" ]]; then
            cp -r packages/* repository/ || true
          fi

          # Ensure the directory structure exists even if some combinations are empty
          for distro in alpine wolfi; do
            for arch in x86_64 aarch64; do
              mkdir -p "repository/${distro}/${arch}"
            done
          done

      - name: Generate repository metadata
        run: |
          # Create index.html for the repository
          cat > repository/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Metal3 Ironic APK Repository</title>
              <style>
                  body { font-family: Arial, sans-serif; margin: 40px; }
                  .container { max-width: 800px; margin: 0 auto; }
                  .repo-url { background: #f4f4f4; padding: 15px; border-radius: 5px; margin: 20px 0; font-family: monospace; }
                  .distro { margin: 30px 0; }
                  .arch-list { margin-left: 20px; }
                  .warning { background: #fff3cd; border: 1px solid #ffeaa7; padding: 15px; border-radius: 5px; margin: 20px 0; }
                  a { color: #0366d6; text-decoration: none; }
                  a:hover { text-decoration: underline; }
              </style>
          </head>
          <body>
              <div class="container">
                  <h1>Metal3 Ironic APK Repository</h1>
                  <p>This repository contains APK packages for OpenStack Ironic and its dependencies, built for both Alpine Linux and Wolfi.</p>

                  <div class="warning">
                      <strong>⚠️ Note:</strong> This is an unofficial repository. Use at your own discretion.
                  </div>

                  <h2>Available Distributions</h2>
          EOF

          for distro in alpine wolfi; do
            echo "        <div class='distro'>" >> repository/index.html
            echo "          <h3>$(echo $distro | tr '[:lower:]' '[:upper:]')</h3>" >> repository/index.html
            echo "          <div class='arch-list'>" >> repository/index.html

            for arch in x86_64 aarch64; do
              if [[ -d "repository/${distro}/${arch}" ]] && [[ $(ls -1 repository/${distro}/${arch}/*.apk 2>/dev/null | wc -l) -gt 0 ]]; then
                echo "            <p><a href='./${distro}/${arch}/'>${arch}</a> - $(ls -1 repository/${distro}/${arch}/*.apk 2>/dev/null | wc -l) packages</p>" >> repository/index.html
              fi
            done

            echo "          </div>" >> repository/index.html
            echo "        </div>" >> repository/index.html
          done

          cat >> repository/index.html << 'EOF'

                  <h2>Repository URLs</h2>
                  <p>To use this repository, add the following URLs to your APK configuration:</p>

                  <div class="repo-url">
                  Alpine: https://metal3-community.github.io/ironic-packages/alpine<br>
                  Wolfi: https://metal3-community.github.io/ironic-packages/wolfi<br>
                  </div>

                  <h2>Usage</h2>
                  <p>Add the repository to your APK configuration:</p>
                  <div class="repo-url">
                  echo "https://metal3-community.github.io/ironic-packages/alpine" >> /etc/apk/repositories<br>
                  apk update
                  </div>

                  <p>Last updated: $(date -u '+%Y-%m-%d %H:%M:%S UTC')</p>
                  <p>Source: <a href="https://github.com/metal3-community/ironic-packages">github.com/metal3-community/ironic-packages</a></p>
              </div>
          </body>
          </html>
          EOF

          # Create directory index files for each distribution/architecture
          for distro in alpine wolfi; do
            for arch in x86_64 aarch64; do
              if [[ -d "repository/${distro}/${arch}" ]]; then
                cat > "repository/${distro}/${arch}/index.html" << EOF
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>${distro^} ${arch} - Metal3 Ironic APK Repository</title>
              <style>
                  body { font-family: Arial, sans-serif; margin: 40px; }
                  .container { max-width: 800px; margin: 0 auto; }
                  table { width: 100%; border-collapse: collapse; margin: 20px 0; }
                  th, td { padding: 12px; text-align: left; border-bottom: 1px solid #ddd; }
                  th { background-color: #f2f2f2; }
                  .back-link { margin-bottom: 20px; }
                  a { color: #0366d6; text-decoration: none; }
                  a:hover { text-decoration: underline; }
              </style>
          </head>
          <body>
              <div class="container">
                  <div class="back-link">
                      <a href="../../">← Back to main repository</a>
                  </div>

                  <h1>${distro^} ${arch} Packages</h1>

                  <table>
                      <thead>
                          <tr>
                              <th>Package</th>
                              <th>Size</th>
                              <th>Modified</th>
                          </tr>
                      </thead>
                      <tbody>
          EOF

                if [[ -f "repository/${distro}/${arch}/APKINDEX.tar.gz" ]]; then
                  file="APKINDEX.tar.gz"
                  size=$(stat -f%z "repository/${distro}/${arch}/${file}" 2>/dev/null || stat -c%s "repository/${distro}/${arch}/${file}" 2>/dev/null || echo "0")
                  mod_time=$(stat -f%Sm "repository/${distro}/${arch}/${file}" 2>/dev/null || stat -c%y "repository/${distro}/${arch}/${file}" 2>/dev/null || echo "unknown")
                  echo "                          <tr><td><a href='./${file}'>${file}</a></td><td>${size} bytes</td><td>${mod_time}</td></tr>" >> "repository/${distro}/${arch}/index.html"
                fi

                for file in repository/${distro}/${arch}/*.apk; do
                  if [[ -f "$file" ]]; then
                    filename=$(basename "$file")
                    size=$(stat -f%z "$file" 2>/dev/null || stat -c%s "$file" 2>/dev/null || echo "0")
                    mod_time=$(stat -f%Sm "$file" 2>/dev/null || stat -c%y "$file" 2>/dev/null || echo "unknown")
                    echo "                          <tr><td><a href='./${filename}'>${filename}</a></td><td>${size} bytes</td><td>${mod_time}</td></tr>" >> "repository/${distro}/${arch}/index.html"
                  fi
                done

                cat >> "repository/${distro}/${arch}/index.html" << 'EOF'
                      </tbody>
                  </table>

                  <p>Last updated: $(date -u '+%Y-%m-%d %H:%M:%S UTC')</p>
              </div>
          </body>
          </html>
          EOF
              fi
            done
          done

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@56afc609e74202658d3ffba0e8f6dda462b719fa # v3.0.1
        with:
          path: repository/

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@d6db90164ac5ed86f2b6aed7e0febac5b3c0c03e # v4.0.5

  cleanup:
    name: Cleanup old artifacts
    runs-on: ubuntu-latest
    needs: [publish-repository]
    if: always() && github.repository == 'metal3-community/ironic-packages'
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      - name: Delete workflow artifacts
        uses: geekyeggo/delete-artifact@f275313e70c08f6120db482d7a6b98377786765b # v5.1.0
        with:
          name: |
            packages-alpine
            packages-wolfi
          failOnError: false
